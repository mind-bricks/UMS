# Generated by Django 2.2.8 on 2020-01-06 03:38

from uuid import uuid1

from django.contrib.auth.models import (
    UserManager,
)
from django.contrib.auth.validators import (
    UnicodeUsernameValidator,
)
from django.db import (
    migrations,
    models,
)
from django.utils import timezone


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID'
                    ),
                ),
                (
                    'password',
                    models.CharField(
                        max_length=128,
                        verbose_name='password'
                    ),
                ),
                (
                    'last_login', models.DateTimeField(
                        blank=True,
                        null=True,
                        verbose_name='last login'
                    ),
                ),
                (
                    'is_superuser',
                    models.BooleanField(
                        default=False,
                        help_text='Designates that this user has all '
                                  'permissions without explicitly '
                                  'assigning them.',
                        verbose_name='superuser status'
                    ),
                ),
                (
                    'username',
                    models.CharField(
                        error_messages={
                            'unique':
                                'A user with that username already exists.'
                        },
                        help_text='Required. 150 characters or fewer. '
                        'Letters, digits and @/./+/-/_ only.',
                        max_length=150,
                        unique=True,
                        validators=[UnicodeUsernameValidator()],
                        verbose_name='username',
                    )
                ),
                (
                    'first_name', models.CharField(
                        blank=True,
                        max_length=30,
                        verbose_name='first name'
                    ),
                ),
                (
                    'last_name',
                    models.CharField(
                        blank=True,
                        max_length=150,
                        verbose_name='last name'
                    ),
                ),
                (
                    'is_staff',
                    models.BooleanField(
                        default=False,
                        help_text='Designates whether the user '
                        'can log into this admin site.',
                        verbose_name='staff status'
                    ),
                ),
                (
                    'is_active',
                    models.BooleanField(
                        default=True,
                        help_text='Designates whether this user should be '
                                  'treated as active. Unselect this instead '
                                  'of deleting accounts.',
                        verbose_name='active'
                    )
                ),
                (
                    'date_joined',
                    models.DateTimeField(
                        default=timezone.now,
                        verbose_name='date joined'
                    )
                ),
                (
                    'uuid',
                    models.UUIDField(
                        default=uuid1,
                        unique=True,
                    )
                ),
                (
                    'realm',
                    models.CharField(
                        blank=True,
                        default='',
                        max_length=32,
                    )
                ),
                (
                    'realm_username',
                    models.CharField(
                        max_length=128,
                        validators=[UnicodeUsernameValidator()],
                    )
                ),
                (
                    'email',
                    models.EmailField(
                        blank=True,
                        default=None,
                        max_length=254,
                        null=True,
                        verbose_name='email address',
                    ),
                ),
                (
                    'mobile',
                    models.CharField(
                        blank=True,
                        default=None,
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    'groups',
                    models.ManyToManyField(
                        blank=True,
                        help_text='The groups this user belongs to. '
                        'A user will get all permissions granted to each of '
                        'their groups.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Group',
                        verbose_name='groups',
                    ),
                ),
                (
                    'user_permissions',
                    models.ManyToManyField(
                        blank=True,
                        help_text='Specific permissions for this user.',
                        related_name='user_set',
                        related_query_name='user',
                        to='auth.Permission',
                        verbose_name='user permissions'
                    ),
                ),
            ],
            options={
                'unique_together': {
                    ('realm', 'mobile'),
                    ('realm', 'email'),
                    ('realm', 'realm_username'),
                },
            },
            managers=[
                ('objects', UserManager()),
            ],
        ),
    ]
